scalar Time
scalar Upload
scalar UUID

enum RoleCode {
    owner
    admin
    visitor
    observer
}

type Role {
  code: String!
  name: String!
}

type UserAccount {
    id: UUID!
    email: String!
    username: String!
    first_name: String!
    last_name: String!
    role: Role!
    createdAt: Time!
    todos: [Todo!]!
}

enum Status {
    DONE
    IN_PROGRESS
    MISSED
}

type Todo {
    id: UUID!
    title: String!
    completed: Boolean!
    status: Status!
    content: String!
    createdAt: Time!
    updatedAt: Time
    dueDate: Time
    background: String
    numOfLikes: Int!
    numOfComments: Int!
    liked: Boolean!
}

type Comment {
    id: UUID!
    content: String!
    createdAt: Time!
    updatedAt: Time
    numOfLikes: Int!
    liked: Boolean!
}
enum RoleLevel {
    AUTHOR
    USER
}

interface BaseMutationResponse {
    ok: Boolean!
    message: String!
}

# directive @hasRole(roles: [RoleLevel!]!) on FIELD_DEFINITION

input FindTodoInput {
    id: UUID!
}

input FindUserInput {
    id: UUID!
}

type Query {
    users: [UserAccount!]!
    findUser(input: FindUserInput!): UserAccount
}
extend type Mutation {
    createComment(input: CreateCommentInput!): CreateCommentResponse!
    createChildComment(input: CreateChildCommentInput!): CreateChildCommentResponse!
    likeComment(input: LikeCommentInput!): LikeCommentResponse!
    unlikeComment(input: UnlikeCommentInput!): UnLikeCommentResponse!
}

extend type Query {
    todoMainComments(input: TodoMainCommentInput!): [Comment!]!
    todoSubComments(input: TodoSubcommentsInput!): [Comment!]!
}

input TodoMainCommentInput {
    todoID: UUID!
}

input TodoSubcommentsInput {
    parentCommentID: UUID!
}

input LikeCommentInput {
    commentID: UUID!
}

type LikeCommentResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
}

type UnLikeCommentResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
}

input UnlikeCommentInput {
    commentID: UUID!
}

input CreateCommentInput {
    todoID: UUID!
    content: String!
}

input CreateChildCommentInput {
    todoID: UUID!
    content: String!
    parentID: UUID!
}

type CreateChildCommentResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    comment: Comment!
}

type CreateCommentResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    comment: Comment!
}
extend type Mutation {
    createTodo(input: CreateTodoInput!): CreateTodoResponse!
    updateTodo(input: UpdateTodoInput!): UpdateTodoResponse! # @hasRole(roles: [AUTHOR])
    deleteTodo(input: DeleteTodoInput!): DeleteTodoResponse! # @hasRole(roles: [AUTHOR])

    likeTodo(input: LikeTodoInput!): LikeTodoResponse!
    unlikeTodo(input: UnlikeTodoinput!): UnlikeTodoResponse!
}

input UnlikeTodoinput {
    todoID: UUID!
}

type UnlikeTodoResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
}

extend type Query {
    todos: [Todo!]!
    findTodo(input: FindTodoInput!): Todo
    findMyTodos: [Todo!]!

    findTodoLikers(input: FindTodoLikersInput!): FindTodoLikersResponse!
}

input FindTodoLikersInput {
    todoID: UUID!
}

type FindTodoLikersResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    likers: [UserAccount!]!
}

type CreateTodoResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    todo: Todo
}

type LikeTodoResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
}

type DeleteTodoResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
}

type UpdateTodoResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    todo: Todo
}

input CreateTodoInput {
    title: String!
    done: Boolean!
    content: String!
    dueDate: Time
    bgColor: String
}

input UpdateTodoInput {
    id: UUID!
    title: String!
    done: Boolean!
    content: String!
    dueDate: Time
    bgColor: String
}

input DeleteTodoInput {
    id: UUID!
}

input LikeTodoInput {
    todoID: UUID!
}
extend type Mutation {
    createNewUser(input: CreateNewUserInput!): CreateNewUserResponse!
}

type CreateNewUserResponse implements BaseMutationResponse {
    ok: Boolean!
    message: String!
    user: UserAccount
}

input CreateNewUserInput {
    firstName: String!
    lastName: String!
    username: String!
    email: String!
    password: String!
    passwordConfirm: String!
}
