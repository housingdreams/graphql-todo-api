// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/leminhson2398/todo-api/internal/db"
)

type BaseMutationResponse interface {
	IsBaseMutationResponse()
}

type CreateChildCommentInput struct {
	TodoID   uuid.UUID `json:"todoID"`
	Content  string    `json:"content"`
	ParentID uuid.UUID `json:"parentID"`
}

type CreateChildCommentResponse struct {
	Ok      bool        `json:"ok"`
	Message string      `json:"message"`
	Comment *db.Comment `json:"comment"`
}

func (CreateChildCommentResponse) IsBaseMutationResponse() {}

type CreateCommentInput struct {
	TodoID  uuid.UUID `json:"todoID"`
	Content string    `json:"content"`
}

type CreateCommentResponse struct {
	Ok      bool        `json:"ok"`
	Message string      `json:"message"`
	Comment *db.Comment `json:"comment"`
}

func (CreateCommentResponse) IsBaseMutationResponse() {}

type CreateNewUserInput struct {
	FirstName       string `json:"firstName"`
	LastName        string `json:"lastName"`
	Username        string `json:"username"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	PasswordConfirm string `json:"passwordConfirm"`
}

type CreateNewUserResponse struct {
	Ok      bool            `json:"ok"`
	Message string          `json:"message"`
	User    *db.UserAccount `json:"user"`
}

func (CreateNewUserResponse) IsBaseMutationResponse() {}

type CreateTodoInput struct {
	Title   string     `json:"title"`
	Done    bool       `json:"done"`
	Content string     `json:"content"`
	DueDate *time.Time `json:"dueDate"`
	BgColor *string    `json:"bgColor"`
}

type CreateTodoResponse struct {
	Ok      bool     `json:"ok"`
	Message string   `json:"message"`
	Todo    *db.Todo `json:"todo"`
}

func (CreateTodoResponse) IsBaseMutationResponse() {}

type DeleteTodoInput struct {
	ID uuid.UUID `json:"id"`
}

type DeleteTodoResponse struct {
	Ok      bool   `json:"ok"`
	Message string `json:"message"`
}

func (DeleteTodoResponse) IsBaseMutationResponse() {}

type FindTodoInput struct {
	ID uuid.UUID `json:"id"`
}

type FindTodoLikersInput struct {
	TodoID uuid.UUID `json:"todoID"`
}

type FindTodoLikersResponse struct {
	Ok      bool             `json:"ok"`
	Message string           `json:"message"`
	Likers  []db.UserAccount `json:"likers"`
}

func (FindTodoLikersResponse) IsBaseMutationResponse() {}

type FindUserInput struct {
	ID uuid.UUID `json:"id"`
}

type LikeCommentInput struct {
	CommentID uuid.UUID `json:"commentID"`
}

type LikeCommentResponse struct {
	Ok      bool   `json:"ok"`
	Message string `json:"message"`
}

func (LikeCommentResponse) IsBaseMutationResponse() {}

type LikeTodoInput struct {
	TodoID uuid.UUID `json:"todoID"`
}

type LikeTodoResponse struct {
	Ok      bool   `json:"ok"`
	Message string `json:"message"`
}

func (LikeTodoResponse) IsBaseMutationResponse() {}

type TodoMainCommentInput struct {
	TodoID uuid.UUID `json:"todoID"`
}

type TodoSubcommentsInput struct {
	ParentCommentID uuid.UUID `json:"parentCommentID"`
}

type UnLikeCommentResponse struct {
	Ok      bool   `json:"ok"`
	Message string `json:"message"`
}

func (UnLikeCommentResponse) IsBaseMutationResponse() {}

type UnlikeCommentInput struct {
	CommentID uuid.UUID `json:"commentID"`
}

type UnlikeTodoResponse struct {
	Ok      bool   `json:"ok"`
	Message string `json:"message"`
}

func (UnlikeTodoResponse) IsBaseMutationResponse() {}

type UnlikeTodoinput struct {
	TodoID uuid.UUID `json:"todoID"`
}

type UpdateTodoInput struct {
	ID      uuid.UUID  `json:"id"`
	Title   string     `json:"title"`
	Done    bool       `json:"done"`
	Content string     `json:"content"`
	DueDate *time.Time `json:"dueDate"`
	BgColor *string    `json:"bgColor"`
}

type UpdateTodoResponse struct {
	Ok      bool     `json:"ok"`
	Message string   `json:"message"`
	Todo    *db.Todo `json:"todo"`
}

func (UpdateTodoResponse) IsBaseMutationResponse() {}

type RoleCode string

const (
	RoleCodeOwner    RoleCode = "owner"
	RoleCodeAdmin    RoleCode = "admin"
	RoleCodeVisitor  RoleCode = "visitor"
	RoleCodeObserver RoleCode = "observer"
)

var AllRoleCode = []RoleCode{
	RoleCodeOwner,
	RoleCodeAdmin,
	RoleCodeVisitor,
	RoleCodeObserver,
}

func (e RoleCode) IsValid() bool {
	switch e {
	case RoleCodeOwner, RoleCodeAdmin, RoleCodeVisitor, RoleCodeObserver:
		return true
	}
	return false
}

func (e RoleCode) String() string {
	return string(e)
}

func (e *RoleCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleCode", str)
	}
	return nil
}

func (e RoleCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleLevel string

const (
	RoleLevelAuthor RoleLevel = "AUTHOR"
	RoleLevelUser   RoleLevel = "USER"
)

var AllRoleLevel = []RoleLevel{
	RoleLevelAuthor,
	RoleLevelUser,
}

func (e RoleLevel) IsValid() bool {
	switch e {
	case RoleLevelAuthor, RoleLevelUser:
		return true
	}
	return false
}

func (e RoleLevel) String() string {
	return string(e)
}

func (e *RoleLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleLevel", str)
	}
	return nil
}

func (e RoleLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusDone       Status = "DONE"
	StatusInProgress Status = "IN_PROGRESS"
	StatusMissed     Status = "MISSED"
)

var AllStatus = []Status{
	StatusDone,
	StatusInProgress,
	StatusMissed,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusDone, StatusInProgress, StatusMissed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
