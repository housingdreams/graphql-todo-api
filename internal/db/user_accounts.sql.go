// Code generated by sqlc. DO NOT EDIT.
// source: user_accounts.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO user_account(
        first_name,
        last_name,
        username,
        email,
        password_hash,
        is_online,
        created_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
`

type CreateUserAccountParams struct {
	FirstName    string    `json:"first_name"`
	LastName     string    `json:"last_name"`
	Username     string    `json:"username"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
	IsOnline     bool      `json:"is_online"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, createUserAccount,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.IsOnline,
		arg.CreatedAt,
	)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}

const getAllUserAccounts = `-- name: GetAllUserAccounts :many
SELECT user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
FROM user_account
`

func (q *Queries) GetAllUserAccounts(ctx context.Context) ([]UserAccount, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAccount
	for rows.Next() {
		var i UserAccount
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.Email,
			&i.IsOnline,
			&i.LastLogin,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.RoleCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAccountByEmail = `-- name: GetUserAccountByEmail :one
SELECT user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
FROM user_account
WHERE email = $1
`

func (q *Queries) GetUserAccountByEmail(ctx context.Context, email string) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountByEmail, email)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}

const getUserAccountByID = `-- name: GetUserAccountByID :one
SELECT user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
FROM user_account
WHERE user_id = $1
`

func (q *Queries) GetUserAccountByID(ctx context.Context, userID uuid.UUID) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserAccountByID, userID)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code FROM user_account
WHERE email = $1 OR username = $2
`

type GetUserByEmailOrUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUsername, arg.Email, arg.Username)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}

const setUserPassword = `-- name: SetUserPassword :one
UPDATE user_account
SET password_hash = $2
WHERE user_id = $1
RETURNING user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
`

type SetUserPasswordParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) SetUserPassword(ctx context.Context, arg SetUserPasswordParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, setUserPassword, arg.UserID, arg.PasswordHash)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}

const updateUserAccountInfo = `-- name: UpdateUserAccountInfo :one
UPDATE user_account
SET first_name = $2,
    last_name = $3,
    email = $4
WHERE user_id = $1
RETURNING user_id, first_name, last_name, username, email, is_online, last_login, password_hash, created_at, role_code
`

type UpdateUserAccountInfoParams struct {
	UserID    uuid.UUID `json:"user_id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
}

func (q *Queries) UpdateUserAccountInfo(ctx context.Context, arg UpdateUserAccountInfoParams) (UserAccount, error) {
	row := q.db.QueryRowContext(ctx, updateUserAccountInfo,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i UserAccount
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Email,
		&i.IsOnline,
		&i.LastLogin,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.RoleCode,
	)
	return i, err
}
