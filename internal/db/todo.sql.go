// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO "todo" (
        "title",
        "content",
        "background",
        "duedate",
        "owner_id",
        "completed"
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, title, content, background, duedate, created_at, updated_at, completed, owner_id
`

type CreateTodoParams struct {
	Title      string    `json:"title"`
	Content    string    `json:"content"`
	Background string    `json:"background"`
	Duedate    time.Time `json:"duedate"`
	OwnerID    uuid.UUID `json:"owner_id"`
	Completed  bool      `json:"completed"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Title,
		arg.Content,
		arg.Background,
		arg.Duedate,
		arg.OwnerID,
		arg.Completed,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Background,
		&i.Duedate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
		&i.OwnerID,
	)
	return i, err
}

const deleteTodoByID = `-- name: DeleteTodoByID :exec
DELETE FROM "todo"
WHERE "id" = $1
    AND "owner_id" = $2
`

type DeleteTodoByIDParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

func (q *Queries) DeleteTodoByID(ctx context.Context, arg DeleteTodoByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteTodoByID, arg.ID, arg.OwnerID)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, title, content, background, duedate, created_at, updated_at, completed, owner_id
FROM "todo"
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Background,
			&i.Duedate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Completed,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, content, background, duedate, created_at, updated_at, completed, owner_id
FROM "todo"
WHERE "id" = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Background,
		&i.Duedate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
		&i.OwnerID,
	)
	return i, err
}

const selectAllTodosOfUserByUserID = `-- name: SelectAllTodosOfUserByUserID :many
SELECT id, title, content, background, duedate, created_at, updated_at, completed, owner_id
FROM "todo"
WHERE "owner_id" = $1
`

func (q *Queries) SelectAllTodosOfUserByUserID(ctx context.Context, ownerID uuid.UUID) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, selectAllTodosOfUserByUserID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Background,
			&i.Duedate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Completed,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodoByID = `-- name: UpdateTodoByID :one
UPDATE "todo"
SET "title" = $2,
    "content" = $3,
    "background" = $4,
    "duedate" = $5,
    "updated_at" = $6,
    "completed" = $7
WHERE "id" = $1
    AND "owner_id" = $8
RETURNING id, title, content, background, duedate, created_at, updated_at, completed, owner_id
`

type UpdateTodoByIDParams struct {
	ID         uuid.UUID    `json:"id"`
	Title      string       `json:"title"`
	Content    string       `json:"content"`
	Background string       `json:"background"`
	Duedate    time.Time    `json:"duedate"`
	UpdatedAt  sql.NullTime `json:"updated_at"`
	Completed  bool         `json:"completed"`
	OwnerID    uuid.UUID    `json:"owner_id"`
}

func (q *Queries) UpdateTodoByID(ctx context.Context, arg UpdateTodoByIDParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodoByID,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Background,
		arg.Duedate,
		arg.UpdatedAt,
		arg.Completed,
		arg.OwnerID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Background,
		&i.Duedate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Completed,
		&i.OwnerID,
	)
	return i, err
}
