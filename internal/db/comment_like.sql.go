// Code generated by sqlc. DO NOT EDIT.
// source: comment_like.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countNumOfLikesOfCommentByID = `-- name: CountNumOfLikesOfCommentByID :one
SELECT COUNT(*)
FROM "comment_like"
WHERE "id" = $1
`

func (q *Queries) CountNumOfLikesOfCommentByID(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNumOfLikesOfCommentByID, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likeComment = `-- name: LikeComment :exec
INSERT INTO "comment_like" ("owner_id", "comment_id")
VALUES ($1, $2) ON CONFLICT ("owner_id", "comment_id") DO NOTHING
`

type LikeCommentParams struct {
	OwnerID   uuid.UUID `json:"owner_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) LikeComment(ctx context.Context, arg LikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, likeComment, arg.OwnerID, arg.CommentID)
	return err
}

const selectLikeByOwnerIDAndCommentID = `-- name: SelectLikeByOwnerIDAndCommentID :one
SELECT id, comment_id, owner_id
FROM "comment_like"
WHERE "comment_id" = $1
    AND "owner_id" = $2
`

type SelectLikeByOwnerIDAndCommentIDParams struct {
	CommentID uuid.UUID `json:"comment_id"`
	OwnerID   uuid.UUID `json:"owner_id"`
}

func (q *Queries) SelectLikeByOwnerIDAndCommentID(ctx context.Context, arg SelectLikeByOwnerIDAndCommentIDParams) (CommentLike, error) {
	row := q.db.QueryRowContext(ctx, selectLikeByOwnerIDAndCommentID, arg.CommentID, arg.OwnerID)
	var i CommentLike
	err := row.Scan(&i.ID, &i.CommentID, &i.OwnerID)
	return i, err
}

const unlikeComment = `-- name: UnlikeComment :exec
DELETE FROM "comment_like"
WHERE "owner_id" = $1
    AND "comment_id" = $2
`

type UnlikeCommentParams struct {
	OwnerID   uuid.UUID `json:"owner_id"`
	CommentID uuid.UUID `json:"comment_id"`
}

func (q *Queries) UnlikeComment(ctx context.Context, arg UnlikeCommentParams) error {
	_, err := q.db.ExecContext(ctx, unlikeComment, arg.OwnerID, arg.CommentID)
	return err
}
