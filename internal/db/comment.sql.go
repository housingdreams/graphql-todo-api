// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countNumberOfCommentsByTodoID = `-- name: CountNumberOfCommentsByTodoID :one
SELECT COUNT(*)
FROM "comment"
WHERE "todo_id" = $1
`

func (q *Queries) CountNumberOfCommentsByTodoID(ctx context.Context, todoID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNumberOfCommentsByTodoID, todoID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChildCOmment = `-- name: CreateChildCOmment :one
INSERT INTO "comment" (
        "owner_id",
        "content",
        "todo_id",
        "parent_comment_id"
    )
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, owner_id, parent_comment_id, todo_id, content
`

type CreateChildCOmmentParams struct {
	OwnerID         uuid.UUID `json:"owner_id"`
	Content         string    `json:"content"`
	TodoID          uuid.UUID `json:"todo_id"`
	ParentCommentID uuid.UUID `json:"parent_comment_id"`
}

func (q *Queries) CreateChildCOmment(ctx context.Context, arg CreateChildCOmmentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createChildCOmment,
		arg.OwnerID,
		arg.Content,
		arg.TodoID,
		arg.ParentCommentID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
		&i.ParentCommentID,
		&i.TodoID,
		&i.Content,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO "comment" (
        "owner_id",
        "content",
        "todo_id"
    )
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, owner_id, parent_comment_id, todo_id, content
`

type CreateCommentParams struct {
	OwnerID uuid.UUID `json:"owner_id"`
	Content string    `json:"content"`
	TodoID  uuid.UUID `json:"todo_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.OwnerID, arg.Content, arg.TodoID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
		&i.ParentCommentID,
		&i.TodoID,
		&i.Content,
	)
	return i, err
}

const selectMainCommentsByTodoId = `-- name: SelectMainCommentsByTodoId :many
SELECT id, created_at, updated_at, owner_id, parent_comment_id, todo_id, content
FROM "comment"
WHERE "todo_id" = $1
    AND "parent_comment_id" IS NULL
`

func (q *Queries) SelectMainCommentsByTodoId(ctx context.Context, todoID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, selectMainCommentsByTodoId, todoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
			&i.ParentCommentID,
			&i.TodoID,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSubcommentsByParentCommentId = `-- name: SelectSubcommentsByParentCommentId :many
SELECT id, created_at, updated_at, owner_id, parent_comment_id, todo_id, content
FROM "comment"
WHERE "parent_comment_id" = $1
`

func (q *Queries) SelectSubcommentsByParentCommentId(ctx context.Context, parentCommentID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, selectSubcommentsByParentCommentId, parentCommentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
			&i.ParentCommentID,
			&i.TodoID,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
